import requests
import os


class KS_spider(object):
    os_path = os.getcwd() + '/视频/'
    if not os.path.exists(os_path):
        os.mkdir(os_path)

    def __init__(self):
        """准备数据"""
        self.start_url = "https://www.kuaishou.com/graphql"
        self.headers = {
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
            'Connection': 'keep-alive',
            'Content-Length': '74',
            'Content-type': 'application/json',
            'Cookie': 'did=web_f0ac76e1e05bfb0c06b4f8dedb1ebbff; didv=1666943878254; clientid=3',
            'Host': 'id.kuaishou.com',
            'Origin': 'https://www.kuaishou.com',
            'Referer': 'https: //www.kuaishou.com/brilliant',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35'

        }
        self.data = {"operationName": "brilliantTypeDataQuery",
                     "variables": {"hotChannelId": "00", "page": "brilliant", "pcursor": "1"},
                     "query": "fragment photoContent on PhotoEntity {\n  id\n  duration\n  caption\n  originCaption\n  likeCount\n  viewCount\n  realLikeCount\n  coverUrl\n  photoUrl\n  photoH265Url\n  manifest\n  manifestH265\n  videoResource\n  coverUrls {\n    url\n    __typename\n  }\n  timestamp\n  expTag\n  animatedCoverUrl\n  distance\n  videoRatio\n  liked\n  stereoType\n  profileUserTopPhoto\n  musicBlocked\n  __typename\n}\n\nfragment feedContent on Feed {\n  type\n  author {\n    id\n    name\n    headerUrl\n    following\n    headerUrls {\n      url\n      __typename\n    }\n    __typename\n  }\n  photo {\n    ...photoContent\n    __typename\n  }\n  canAddComment\n  llsid\n  status\n  currentPcursor\n  tags {\n    type\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment photoResult on PhotoResult {\n  result\n  llsid\n  expTag\n  serverExpTag\n  pcursor\n  feeds {\n    ...feedContent\n    __typename\n  }\n  webPageArea\n  __typename\n}\n\nquery brilliantTypeDataQuery($pcursor: String, $hotChannelId: String, $page: String, $webPageArea: String) {\n  brilliantTypeData(pcursor: $pcursor, hotChannelId: $hotChannelId, page: $page, webPageArea: $webPageArea) {\n    ...photoResult\n    __typename\n  }\n}\n"}

    def get_response(self):
        """发送请求，获取响应数据"""
        for page in range(5):
            response = requests.post(self.start_url, headers=self.headers, json=self.data)
            self.analysis_data(response)

    def analysis_data(self, response):
        """
        解析数据
        :return:
        """
        # 响应解析
        json_data = response.json()
        # 数据提取
        data_list = json_data['data']['brilliantTypeData']['feeds']
        for data_dict in data_list:
            title = data_dict['photo']['caption']
            mp4_url = data_dict['photo']['photoUrl']
            data = requests.get(mp4_url).content
            self.storage_data(title, data)

    def storage_data(self, title, data):
        """
        储存数据
        :return:
        """

        title = title.replace('\n', '').replace('\\', '').replace('\n', '')
        with open(self.os_path + title + 'mp4', 'wb') as s:
            s.write(data)
        print(f'{title}--------获取完成-------')


if __name__ == '__main__':
    t = KS_spider()
    t.get_response()



